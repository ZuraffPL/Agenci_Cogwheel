name: Create Release

on:
  push:
    branches: [ main ]
    paths: [ 'system.json' ]

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ZuraffPL'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: get_version
      run: |
        echo "VERSION=$(node -p "require('./system.json').version")" >> $GITHUB_OUTPUT
        echo "TITLE=$(node -p "require('./system.json').title")" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.get_version.outputs.VERSION }} already exists, skipping release"
        else
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          echo "Creating new release for v${{ steps.get_version.outputs.VERSION }}"
        fi

    - name: Get Changelog Entry
      id: changelog
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        # Extract changelog entry for current version
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        # Read changelog and extract current version section
        # Start from the line with current version, stop at next version or end of file
        sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d' | tail -n +2 > current_changelog.md
        
        # If that didn't work, try alternative approach
        if [ ! -s current_changelog.md ]; then
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > current_changelog.md
        fi
        
        # If still empty, create a default one
        if [ ! -s current_changelog.md ]; then
          echo "### Changes" > current_changelog.md
          echo "- Version $VERSION release" >> current_changelog.md
        fi
        
        # Debug: show what we extracted
        echo "=== Extracted changelog ==="
        cat current_changelog.md
        echo "=== End changelog ==="
        
        # Set output using proper delimiter
        {
          echo 'CHANGELOG<<EOF'
          cat current_changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Update README.md
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        # Create a summary of the current changelog entry for README
        echo "Updating README.md with version $VERSION"
        
        # Extract key changes for README (first few bullet points)
        head -n 10 current_changelog.md | grep "^-" | head -n 5 > readme_changes.txt
        
        # If no bullet points found, try with different format
        if [ ! -s readme_changes.txt ]; then
          head -n 10 current_changelog.md | grep "^  -" | head -n 5 > readme_changes.txt
        fi
        
        # If still empty, use the whole changelog section
        if [ ! -s readme_changes.txt ]; then
          head -n 8 current_changelog.md > readme_changes.txt
        fi
        
        # Update README.md changelog section
        # Find the line with "### Version" and replace the section
        awk -v version="$VERSION" -v file="readme_changes.txt" '
        BEGIN {
          while ((getline line < file) > 0) {
            changes = changes line "\n"
          }
          close(file)
        }
        /^### Version/ {
          print "### Version " version
          print changes
          # Skip until next section or end
          while (getline > 0 && !/^---/ && !/^##/) {
            continue
          }
          if (/^---/) print $0
          next
        }
        { print }
        ' README.md > README_new.md
        
        # Replace original file
        mv README_new.md README.md
        
        echo "README.md updated with version $VERSION"
        
        # Show what changed
        echo "=== README Changelog Section ==="
        grep -A 10 "^### Version" README.md || echo "Section not found"
        echo "=== End README Section ==="

    - name: Commit README update
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if README was actually changed
        if git diff --quiet README.md; then
          echo "No changes to README.md"
        else
          git add README.md
          git commit -m "Update README.md changelog for v${{ steps.get_version.outputs.VERSION }}"
          git push origin main
          echo "README.md updated and pushed"
        fi

    - name: Create zip file
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        # Create a zip file with the system files
        zip -r cogwheel-syndicate.zip . \
          -x "*.git*" "node_modules/*" "*.github*" "*.gitignore" "README.md" "INSTALL.md" "LICENSE"
        
        # Also create a versioned zip
        cp cogwheel-syndicate.zip cogwheel-syndicate-${{ steps.get_version.outputs.VERSION }}.zip

    - name: Create Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: v${{ steps.get_version.outputs.VERSION }} - ${{ steps.get_version.outputs.TITLE }}
        body: |
          # ${{ steps.get_version.outputs.TITLE }} v${{ steps.get_version.outputs.VERSION }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          **Manifest URL for Foundry VTT:**
          ```
          https://github.com/ZuraffPL/Agenci_Cogwheel/releases/latest/download/system.json
          ```
          
          **Manual Installation:**
          Download the `cogwheel-syndicate.zip` file and extract it to your Foundry VTT systems folder.
          
          ## Compatibility
          - Foundry VTT v12+
          - Verified with Foundry VTT v12.331
        files: |
          cogwheel-syndicate.zip
          cogwheel-syndicate-${{ steps.get_version.outputs.VERSION }}.zip
          system.json
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
